Hasta el momento se esta trabajando en el reconocimiento de las imagenes, asi como la creacion de la imagen virtual de la cara.
Para eso, se realiza la imagen de 600x600 pixeles para cada cara y se pinta de blanco. Esto sucede en el archivo llamado "caras.py"
En el archivo "modificador le podemos dar los colores que desemos a los nueve puntos que deseamos.

Falta leer los 9 puntos que hay en la imagen, y hacer la rutina para ponerlos en dichas caras.
Tenemos que hacer variables con los tonos de color que deseamos.
Naranja, Blanco, Azul, Amarillo, Verde, Rojo
Blanco=[255,255,255]
Azul=[255,0,0]
Verde=[0,255,0]
Rojo=[255,255,255]
Naranja=[0,128,255]
Amarillo=[0,233,255]


23/02/2021
Ayuda para detectar los colores con la imagen del HSV
The x-axis represents Hue in [0,180), the y-axis1 represents Saturation in [0,255], the y-axis2 represents S = 255, while keep V = 255.

To find a color, usually just look up for the range of H and S, and set v in range(20, 255).

To find the orange color, we look up for the map, and find the best range: H :[10, 25], S: [100, 255], and V: [20, 255]. So the mask is cv2.inRange(hsv,(10, 100, 20), (25, 255, 255) )

Then we use the found range to look for the orange color, this is the result:


24/02/2021
Podemos dejar de buscar eñ color blanco. Solo dejamos el background de color blanco.
El programa tiene que ejecutarse desde el principio, por lo que se crearian nuevas plantillas.

"""Guardar codigo por si acaso
#El array toma valores de HSV ---> H=Matiz (0 a 179)   S=Saturacion (0 a 255)  V=Brillo  (0 a 255)
RedBajo1=np.array([161, 155, 150], np.uint8)
RedAlto1=np.array([180, 255, 255], np.uint8)
RedBajo2=np.array([0, 155, 150], np.uint8)
RedAlto2=np.array([5, 255, 255], np.uint8)
#Azul
BlueBajo=np.array([110,175,200],np.uint8)
BlueAlto=np.array([120,255,255],np.uint8)
#Amarillo
YellowBajo=np.array([20,100,120],np.uint8)
YellowAlto=np.array([45,255,255],np.uint8)
#Verde
GreenBajo=np.array([50,200,200],np.uint8)
GreenAlto=np.array([65,255,255],np.uint8)
#Naranja
OrangeBajo=np.array([10,200,20],np.uint8)
OrangeAlto=np.array([20,255,255],np.uint8)
#Blanco
WhiteBajo=np.array([0,0,0],np.uint8)
WhiteAlto=np.array([180,10,180],np.uint8)
"""




    for i in range(len(ncara)):
        cara = cv2.imread('Caras digitalizadas\Cara_'+ncara[i]+'.jpg')
        #Son los 9 cuadrados de la cara
        #Primera fila
        cara[:rangex1,:rangey1] = Azul
        cara[:rangex1,rangey1:rangey2] = Rojo
        cara[:rangex1,rangey2:rangey3] = Verde
        #Segunda fila
        cara[rangex1:rangex2,:rangey1] = Naranja
        cara[rangex1:rangex2,rangey1:rangey2] = Blanco#Este es el punto central
        cara[rangex1:rangex2,rangey2:rangey3] = Amarillo
        #Tercera fila
        cara[rangex2:rangex3,:rangey1] = Azul
        cara[rangex2:rangex3,rangey1:rangey2] = Verde
        cara[rangex2:rangex3,rangey2:rangey3] = Rojo
        #cv2.imshow('Cara_'+ ncara[i],cara)
        cv2.imwrite('Cara_'+ ncara[i]+'.jpg', cara)
    cv2.waitKey(0)
    cv2.destroyAllWindows()




    #Las siguientes matrices o arrays se usaran como un rango de deteccion de colores.
    #El array toma valores de HSV ---> H=Matiz (0 a 179)   S=Saturacion (0 a 255)  V=Brillo  (0 a 255)
    RedBajo1=np.array([161, 120, 150], np.uint8)
    RedAlto1=np.array([180, 255, 255], np.uint8)
    RedBajo2=np.array([0, 120, 150], np.uint8)
    RedAlto2=np.array([1, 255, 255], np.uint8)
    R2_rojo=[RedBajo1,RedAlto1,RedBajo2,RedAlto2]
    #Azul
    BlueBajo=np.array([100,95,180],np.uint8)
    BlueAlto=np.array([130,255,255],np.uint8)
    R_azul=[BlueBajo,BlueAlto]
    #Amarillo
    YellowBajo=np.array([16,70,165],np.uint8)
    YellowAlto=np.array([45,255,255],np.uint8)
    R_amarillo=[YellowBajo,YellowAlto]
    #Verde
    GreenBajo=np.array([46,70,200],np.uint8)
    GreenAlto=np.array([80,255,255],np.uint8)
    R_verde=[GreenBajo,GreenAlto]
    #Naranja
    OrangeBajo=np.array([2,80,245],np.uint8)
    OrangeAlto=np.array([15,255,255],np.uint8)
    R_naranja=[OrangeBajo,OrangeAlto]
    #Blanco
    #El blanco no se siguio usando debido a que el fondo de la cara digitalizada es blanco.
    #Por lo tanto, no es necesario pintarlo, solo cuidaremos de no pintarlo de otro color.
    #WhiteBajo=np.array([0,0,230],np.uint8)
    #WhiteAlto=np.array([180,55,255],np.uint8)





19/03/2021
Poner circulos en fomi y pegarselos
Aplicar lo del agente virtual para la deteccion de los colores
Crear una base de datos donde se guarde los datos de HSV y tener como resultado el color 
tomar varias fotos de mi cubo y sacar sus colores HSV


23/03/2021
Se realizó una base de datos donde se guardo los valores BGR obtenidos con el analisis de la imagen en el archivo "base de datos.py"
Archivos del programa
"main.py" el archivo donde se ejecutara todo el programa de reconocimiento de caras y la visualizacion de las caras digitales.
"detector.py" corresponde al archivo que nos permite tomar fotos, recortarlas y recortar los 9 puntos de la cara.
Tambien nos permite crear las caras digitales, asi como modificarlas.
"concatenacion.py" nos permite visualizar el cubo en 2D
"configuracion.py" alamacena todas las configuraciones de nuestro programa
"base_datos.py" nos permite leer el valor de la imagen en formato BGR y alamcenarlo en una base de datos.
"Agente.py" es el codigo correspondiente a la aprte de analisi para predecir el color que se esta visualizado a partir de los datos almacenados en la base de datos.